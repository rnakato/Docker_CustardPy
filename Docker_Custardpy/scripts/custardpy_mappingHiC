#!/bin/bash

printHelpAndExit() {
    echo "Usage: ${0##*/} [options] -i <index> -g <gt> <fastq1> <fastq2> <prefix>"
    echo "  fastq1, fastq2: paired-end fastq file"
    echo "  prefix: prefix of output files"
    echo -e "\n  Options:"
    echo "    -S state : steps to be executed [all|pairs|postproc] (default: all)"
    echo "    -i index : bwa index"
    echo "    -g genometable : genome table file (describing the chromosome length)"
    echo "    -e enzyme : enzyme (HindIII|MboI|DpnII default: HindIII)"
    echo "    -b build : genome build (default: hg38)"
    echo "    -q qvalue : threshould of mapped fragments (default: 30, for '--min-mapq' of pairtools parse)"
    echo "    -p ncore : number of CPUs (default: 4)"
    echo "    -m max_distance : 8.4 for human, 8.2 for mouse (for pairsqc.py, default: 8.4)"
    echo "    -n binsize_min : binsize_min (for cooler cload pairix, default: 5000)"
    echo "    -r binsize_multi : binsize_multi (for multirescool, default: '5000,10000,25000,50000,100000,500000,1000000,2500000,5000000,10000000')"
   exit 0
}

ncore=4
index_bwa=""
gt=""
enzyme="HindIII"
build="hg38"
qthre=30
stage="all"
max_split=2
max_distance=8.4
binsize_min=5000
binsize_multi="5000,10000,25000,50000,100000,500000,1000000,2500000,5000000,10000000"

while getopts "i:g:e:b:q:p:S:m:n:r:h" opt; do
    case $opt in
        i) index_bwa=$OPTARG;;
        g) gt=$OPTARG;;
        e) enzyme=$OPTARG;;
        b) build=$OPTARG;;
        q) qthre=$OPTARG;;
        p) ncore=$OPTARG;;
        S) state=$OPTARG;;
        m) max_distance=$OPTARG;;
        n) binsize_min=$OPTARG;;
        r) binsize_multi=$OPTARG;;
        h) printHelpAndExit;;
        [?]) printHelpAndExit;;
        esac
done

shift $((OPTIND - 1))

if [ $# -ne 3 ]; then
    printHelpAndExit
fi

if [ ! -z "$stage" ]
then
    case $stage in
       all) stage_all=1 ;;
       pairs) stage_pairs=1 ;;
       postproc) stage_postproc=1 ;;
       *) echo "Error: specify [all|pairs|postproc] for stage (-S)."
          printHelpAndExit
    esac
fi

if test $enzyme = "HindIII"; then
    enzymelen=6
else
    enzymelen=4
fi

if test "$gt" = ""; then
    echo "Error: specify genome table (-g)."
    exit 0
fi

fq1=$1
fq2=$2
prefix=$3

restrictionsite=/Cooler-restriction_sites/${enzyme}_resfrag_$build.bed
odir=Cooler_$build/$prefix

if [ -z $postproc ]; then
    if test "$index_bwa" = ""; then
	echo "Error: specify bwa index (-i)."
	exit 0
    fi
    echo "start mapping by bwa..."
    # bwa
    tempdir=$odir/temp
    logdir=$odir/log
    mkdir -p $odir/bam $odir/pairs $logdir $tempdir

    bwa mem -t $ncore -SP5M $index_bwa $fq1 $fq2 2> $logdir/bwa_mapping | samtools view -Shb - > $odir/bam/mapped.bwa.bam

    echo "start parsing by pairtools..."
    samtools view -h $odir/bam/mapped.bwa.bam \
	| pairtools parse --chroms-path $gt --nproc-in 4 --nproc-out 4 --add-columns mapq --min-mapq $qthre \
	| pairtools sort --nproc 4 --tmpdir=$tempdir --output $odir/pairs/bwa.sam.pairs.gz
    pairtools dedup --nproc-in 4 --nproc-out 4 --mark-dups --output-dups - --output-unmapped - \
              --output $odir/pairs/bwa.marked.sam.pairs.gz $odir/pairs/bwa.sam.pairs.gz
    pairix -f $odir/pairs/bwa.marked.sam.pairs.gz # sanity check

    TEMPFILE=$tempdir/temp.gz
    TEMPFILE1=$tempdir/temp1.gz

    ## Generate lossless bam
    #pairtools split --output-sam $odir/bam/bwa.lossless.bam $odir/pairs/bwa.sam.pairs.gz

    echo "start splitting pairsam by pairtools..."
    # Select UU, UR, RU reads
    pairtools select '(pair_type == "UU") or (pair_type == "UR") or (pair_type == "RU")' \
              --output-rest $odir/pairs/bwa.unmapped.sam.pairs.gz \
              --output ${TEMPFILE} \
              $odir/pairs/bwa.sam.pairs.gz
    pairtools split --output-pairs ${TEMPFILE1} ${TEMPFILE}
    pairtools select 'True' --chrom-subset $gt -o $odir/pairs/bwa.dedup.pairs.gz ${TEMPFILE1}
    pairix $odir/pairs/bwa.dedup.pairs.gz  # sanity check & indexing
    rm ${TEMPFILE} ${TEMPFILE1}

    echo "add juicer-style fragment information..."
    # use fragment_4dnpairs.pl in pairix/util instead of juicer/CPU/common
    ffpairs=$odir/pairs/bwa.ff.pairs
    gunzip -c $odir/pairs/bwa.marked.sam.pairs.gz | fragment_4dnpairs.pl -a - $ffpairs $restrictionsite
    bgzip  -f $ffpairs
    pairix -f $ffpairs.gz

    rm -rf $tempdir

    echo "mapping finished!"
    echo "Output pairs file: $ffpairs.gz"
fi

if [ -z $pairs ]; then
    pair=$odir/pairs/bwa.ff.pairs.gz

    echo "generate .cool file..."
    mkdir -p $odir/cool
#    pairix -f $pair
    python /opt/scripts/pairsqc/pairsqc.py -p $pair -c $gt -tP -s $prefix -O $odir/qc -M $max_distance
    Rscript /opt/scripts/pairsqc/plot.r $enzymelen $odir/qc_report
    cooler cload pairix -p $ncore -s $max_split $gt:$binsize_min $pair $odir/cool/$prefix.cool
    cooler balance -p $ncore $odir/cool/$prefix.cool
    run-cool2multirescool.sh -i $odir/cool/$prefix.cool -p $ncore -o $odir/cool/$prefix -u $binsize_multi

    echo "generate .hic..."
    mkdir -p $odir/hic
    juicertools.sh pre -q 30 $pair $odir/hic/contact_map.q30.hic $gt
fi

echo "${0##*/} finished!"
